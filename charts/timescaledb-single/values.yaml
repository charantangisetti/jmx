affinity: {}
affinityTemplate: |
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchLabels:
            app: {{ template "timescaledb.fullname" . }}
            release: {{ .Release.Name | quote }}
            cluster-name: {{ template "clusterName" . }}
    - weight: 50
      podAffinityTerm:
        topologyKey: failure-domain.beta.kubernetes.io/zone
        labelSelector:
          matchLabels:
            app: {{ template "timescaledb.fullname" . }}
            release: {{ .Release.Name | quote }}
            cluster-name: {{ template "clusterName" . }}
backup:
  enabled: false
  env: null
  envFrom: null
  jobs:
  - name: full-weekly
    schedule: 12 02 * * 0
    type: full
  - name: incremental-daily
    schedule: 12 02 * * 1-6
    type: incr
  pgBackRest:
    compress-type: lz4
    process-max: 4
    repo1-cipher-type: none
    repo1-retention-diff: 2
    repo1-retention-full: 2
    repo1-s3-endpoint: s3.amazonaws.com
    repo1-s3-region: us-east-2
    repo1-type: s3
    start-fast: "y"
  pgBackRest:archive-get: {}
  pgBackRest:archive-push: {}
bootstrapFromBackup:
  enabled: false
  repo1-path: null
  secretName: pgbackrest-bootstrap
callbacks:
  configMap: null
clusterName: null
debug:
  execStartPre: null
env: null
envFrom: null
fullWalPrevention:
  checkFrequency: 30
  enabled: false
  thresholds:
    readOnlyFreeMB: 64
    readOnlyFreePercent: 5
    readWriteFreeMB: 128
    readWriteFreePercent: 8
image:
  pullPolicy: IfNotPresent
  repository: local-docker-registry:5001/timescaledb-ha
  tag: pg11-ts2.0-latest
loadBalancer:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"
  enabled: true
  port: 5432
  spec: null
nameOverride: timescaledb
networkPolicy:
  enabled: false
  ingress: null
  prometheusApp: prometheus
nodeSelector: {}
patroni:
  bootstrap:
    dcs:
      loop_wait: 10
      maximum_lag_on_failover: 33554432
      postgresql:
        parameters:
          archive_command: /etc/timescaledb/scripts/pgbackrest_archive.sh %p
          archive_mode: "on"
          archive_timeout: 1800s
          autovacuum_analyze_scale_factor: 0.02
          autovacuum_max_workers: 10
          autovacuum_naptime: 5s
          autovacuum_vacuum_cost_limit: 500
          autovacuum_vacuum_scale_factor: 0.05
          hot_standby: "on"
          log_autovacuum_min_duration: 1min
          log_checkpoints: "on"
          log_connections: "on"
          log_disconnections: "on"
          log_line_prefix: '%t [%p]: [%c-%l] %u@%d,app=%a [%e] '
          log_lock_waits: "on"
          log_min_duration_statement: 1s
          log_statement: ddl
          max_connections: 100
          max_prepared_transactions: 150
          shared_preload_libraries: timescaledb,pg_stat_statements
          ssl: "on"
          ssl_cert_file: /etc/certificate/tls.crt
          ssl_key_file: /etc/certificate/tls.key
          tcp_keepalives_idle: 900
          tcp_keepalives_interval: 100
          temp_file_limit: 1GB
          timescaledb.passfile: ../.pgpass
          unix_socket_directories: /var/run/postgresql
          unix_socket_permissions: "0750"
          wal_level: hot_standby
          wal_log_hints: "on"
        use_pg_rewind: true
        use_slots: true
      retry_timeout: 10
      ttl: 30
    method: restore_or_initdb
    post_init: /etc/timescaledb/scripts/post_init.sh
    restore_or_initdb:
      command: |
        /etc/timescaledb/scripts/restore_or_initdb.sh --encoding=UTF8 --locale=C.UTF-8
      keep_existing_recovery_conf: true
  kubernetes:
    role_label: role
    scope_label: cluster-name
    use_endpoints: true
  log:
    level: WARNING
  postgresql:
    authentication:
      replication:
        username: standby
      superuser:
        username: postgres
    basebackup:
    - waldir: /var/lib/postgresql/wal/pg_wal
    callbacks:
      on_reload: /etc/timescaledb/scripts/patroni_callback.sh
      on_restart: /etc/timescaledb/scripts/patroni_callback.sh
      on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
      on_start: /etc/timescaledb/scripts/patroni_callback.sh
      on_stop: /etc/timescaledb/scripts/patroni_callback.sh
    create_replica_methods:
    - pgbackrest
    - basebackup
    listen: 0.0.0.0:5432
    pg_hba:
    - local     all             postgres                              peer
    - local     all             all                                   md5
    - hostnossl all,replication all                all                reject
    - hostssl   all             all                127.0.0.1/32       md5
    - hostssl   all             all                ::1/128            md5
    - hostssl   replication     standby            all                md5
    - hostssl   all             all                all                md5
    pgbackrest:
      command: /etc/timescaledb/scripts/pgbackrest_restore.sh
      keep_data: true
      no_master: true
      no_params: true
    recovery_conf:
      restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
    use_unix_socket: true
  restapi:
    listen: 0.0.0.0:8008
persistentVolumes:
  data:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /var/lib/postgresql
    size: 2Gi
    subPath: ""
  wal:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /var/lib/postgresql/wal
    size: 1Gi
    storageClass: null
    subPath: ""
pgBouncer:
  config:
    default_pool_size: 12
    max_client_conn: 500
    pool_mode: transaction
    server_reset_query: DISCARD ALL
  enabled: false
  pg_hba:
  - local     all postgres                   peer
  - host      all postgres,standby 0.0.0.0/0 reject
  - host      all postgres,standby ::0/0     reject
  - hostssl   all all              0.0.0.0/0 md5
  - hostssl   all all              ::0/0     md5
  - hostnossl all all              0.0.0.0/0 reject
  - hostnossl all all              ::0/0     reject
  port: 6432
  userListSecretName: null
podAnnotations: {}
podManagementPolicy: Parallel
postInit:
- configMap:
    name: custom-init-scripts
    optional: true
- secret:
    name: custom-secret-scripts
    optional: true
prometheus:
  enabled: false
  env: null
  image:
    pullPolicy: Always
    repository: wrouesnel/postgres_exporter
    tag: v0.7.0
  volumeMounts: null
  volumes: null
rbac:
  create: true
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 5
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 5
replicaCount: 3
replicaLoadBalancer:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"
  enabled: false
  port: 5432
  spec: null
resources: {}
secretNames:
  certificate: null
  credentials: null
  pgbackrest: null
serviceAccount:
  create: true
  name: null
sharedMemory:
  useMount: false
timescaledbTune:
  args: {}
  enabled: true
tolerations: []
unsafe: false
version: null
